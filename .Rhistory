X %>%
as.matrix %>%
apply(1, which.max) %>%
extract(colnames(X), .)
get_most_frequent_label = function(unsupervised_cluster, supervised_class){
X = table(unsupervised_cluster, supervised_class)
data.frame(
unsupervised_cluster = rownames(X),
most_frequent_supervised_class = X %>%
as.matrix %>%
apply(1, which.max) %>%
extract(colnames(X), .)
)
}
get_most_frequent_label(unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs)
matches = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs
) %>%
merge(FetchData(query_dataset, "ident"), by.y = "ident", by.x = "unsupervised_cluster")
dim(matches)
head(matches)
matches = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs
) %>%
merge(FetchData(query_dataset, "ident"), ., by.x = "ident", by.y = "unsupervised_cluster") %>%
set_rownames(Cells(query_dataset))
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
matches_by_cluster = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs
)
matches_by_cell %>%
merge(FetchData(query_dataset, "ident"),
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster") %>%
set_rownames(Cells(query_dataset))
FetchData(query_dataset, "ident"),
matches_by_cell = merge(
FetchData(query_dataset, "ident"),
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
) %>%
set_rownames(Cells(query_dataset))
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
colnames(matches)
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T) +
theme(legend.position = "none")
matches_by_cluster
query_dataset@active.ident
matches_by_cluster = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident %>% as.character,
supervised_class = query_dataset$scmap_cluster_labs %>% as.character,
stringsAsFactors = F
)
matches_by_cluster = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident %>% as.character,
supervised_class = query_dataset$scmap_cluster_labs %>% as.character
)
head(matches_by_cluster)
matches_by_cluster$unsupervised_cluster
matches_by_cluster$most_frequent_supervised_class
FetchData(query_dataset, "ident")
fix_fucking_factors = function(X) {
for(cc in colnames(X)){
if(is.factor(X[[cc]])){
X[[cc]] %<>% as.character
}
}
}
matches_by_cell = merge(
FetchData(query_dataset, "ident") %>% fix_fucking_factors,
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
) %>%
set_rownames(Cells(query_dataset))
fix_fucking_factors = function(X) {
for(cc in colnames(X)){
if(is.factor(X[[cc]])){
X[[cc]] %<>% as.character
}
}
X
}
matches_by_cell = merge(
FetchData(query_dataset, "ident") %>% fix_fucking_factors,
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
) %>%
set_rownames(Cells(query_dataset))
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
FetchData(query_dataset, "ident") %>% fix_fucking_factors
FetchData(query_dataset, "ident") %>% fix_fucking_factors %>% head
FetchData(query_dataset, "ident") %>% fix_fucking_factors %>% extract2("ident")
matches_by_cell = merge(
FetchData(query_dataset, c("ident", "cell")) %>% fix_fucking_factors,
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
)
rownames(matches_by_cell) = matches_by_cell$cell
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
head(matches_by_cell)
matches_by_cluster
X
X[1, ]
X[2, ]
X[3, ]
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = T) +
theme(legend.position = "none")
matches_by_cluster
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
matches_by_cell
matches[, 2, drop = F]
table(matches[, 2, drop = F])
query_dataset %<>% AddMetaData(matches[, 2, drop = F], col.name = most_frequent_supervised_class)
query_dataset %<>% AddMetaData(matches[, 2, drop = F], col.name = "most_frequent_supervised_class")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = F) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = F) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = F) +
theme(legend.position = "none")
X %>%
as.matrix
X %>%
as.matrix %>% heatmap
X %>%
as.matrix %>% t %>% heatmap
table(matches_by_cluster$unsupervised_cluster, matches_by_cluster$most_frequent_supervised_class)
table(matches_by_cluster$unsupervised_cluster, matches_by_cluster$most_frequent_supervised_class) %>% View
table(matches_by_cluster$unsupervised_cluster, matches_by_cluster$most_frequent_supervised_class) %>% View
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = F) +
theme(legend.position = "none")
table(matches_by_cell$unsupervised_cluster, matches_by_cell$most_frequent_supervised_class) %>% View
table(matches_by_cell$ident, matches_by_cell$most_frequent_supervised_class) %>% View
rm(matches)
query_dataset %<>% AddMetaData(matches_by_cell[, 2, drop = F], col.name = "most_frequent_supervised_class")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
head(matches_by_cell)
query_dataset %<>% AddMetaData(matches_by_cell[, 3, drop = F], col.name = "most_frequent_supervised_class")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
# Marker heatmap
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1)
# Marker heatmap
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1)
# Marker heatmap
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 0.5)
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 0.5)
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1)
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1.5)
Sys.time()
Sys.time() - Sys.time()
plot( Sys.time() - Sys.time() )
t1 = Sys.time()
t1 +
3
t1
t1 + 30
?Sys.time
evaluations = runAllBenchmarks(num_include = nrow(signatures), output_dir = "all")
source('~/Desktop/jhu/research/projects/predictcmap/test_scaling.R', echo=TRUE)
+1
rlookc::generateLooks
?rlookc::generateLooks
seq(0)
seq(1)
seq(0, 0)
seq(0, 1)
seq(0, 2)
seq(1, 1)
append(1:5, 5, 6)
append(1:5, 5, 4)
append(1:5, 5, 2)
append(1:5, 5, 0)
append(1:5, NA, 0)
append(1:5, NA, 1)
?knockoff::create.second_order
setwd("~/Desktop/jhu/research/projects/knockoffs/applications/share-seq/")
library("dplyr")
library("ggplot2")
library("magrittr")
library("optparse")
library("glasso")
# Set to FALSE to remake most plots without re-running the most expensive parts.
redo_everything = T
# Compute just part of the lasso path for faster results
dfmax = 21
fast_lasso_penalty = function(X, X_k, y) {
cat(".")
suppressWarnings(
knockoff::stat.lasso_lambdasmax(
y   = y,
X   = X,
X_k = X_k,
dfmax = dfmax
)
)
}
# Load data
cat("\nPrepping data.\n")
withr::with_dir(
"~/Desktop/jhu/research/datalake/dream5/DREAM5_network_inference_challenge/Network3",
{
ecoli_expression    = read.table("input data/net3_expression_data.tsv", header = T)
ecoli_metadata      = read.table("input data/net3_chip_features.tsv", header = T, comment.char = "")
ecoli_tf            = read.table("input data/net3_transcription_factors.tsv")
ecoli_network       = read.table("gold standard/DREAM5_NetworkInference_GoldStandard_Network3.tsv")
ecoli_anonymization = read.table("anonymization/net3_gene_ids.tsv")
}
)
# Make a couple useful alterations to metadata
ecoli_metadata$Time_Rank = ave(ecoli_metadata$Time, ecoli_metadata$X.Experiment,
FUN = function(x) rank(x, na.last = "keep")/max(rank(x)) )
ecoli_metadata$Perturbations[is.na(ecoli_metadata$Perturbations)] = "none"
# De-anonymize genes
ecoli_anonymization_by_name = setNames(toupper(ecoli_anonymization$V2), ecoli_anonymization$V1)
ecoli_network %<>% set_colnames(c("Gene1", "Gene2", "is_confirmed"))
ecoli_network %<>% dplyr::mutate(Gene1_name = ecoli_anonymization_by_name[Gene1] )
ecoli_network %<>% dplyr::mutate(Gene2_name = ecoli_anonymization_by_name[Gene2] )
ecoli_network$Gene1 = NULL
ecoli_network$Gene2 = NULL
# Load curated interations from regulonDB v10.9
ecoli_network_curated =
read.table(sep = "\t",
"~/Desktop/jhu/research/datalake/modern_ecoli/regulondb_10.9/full/genetic_network.txt"
)  %>%
subset(V8=="gene" & V7=="tf") %>%
extract(c(2, 4)) %>%
set_colnames(c("Gene1_name", "Gene2_name"))
ecoli_network_curated[["Gene1_name"]] %<>% toupper
ecoli_network_curated[["Gene2_name"]] %<>% toupper
dim(ecoli_network_curated)
ecoli_network_curated %>%
extract2("Gene1_name") %>%
table %>%
hist(40, main = "TF promiscuity", xlab = "Number of targets per TF")
all_calibration = list()
i = 0
for( covariance_estimator in c("glasso") ){ #"sample", "shrinkage",
for( address_genetic_perturbations in c( F, T ) ){
for( condition_on in c( "none", "pert_labels", "pert_labels_plus_pca" ) ){
add_prefixes = function(output_file){
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
all_calibration[[i]]$address_genetic_perturbations =
ifelse(
address_genetic_perturbations, "handled_as_described", "ignored"
)
all_calibration[[i]]$condition_on = condition_on
}
}
all_calibration %<>% data.table::rbindlist()
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_abline(aes(slope = 1, intercept = 0)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1) +
facet_grid(condition_on ~ address_genetic_perturbations)
ggsave("ecoli_calibration.pdf", width = 6, height = 8)
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr, shape = condition_on, color = condition_on)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1)  +
geom_abline(aes(slope = 1, intercept = 0)) +
facet_grid(~address_genetic_perturbations)
ggsave("ecoli_calibration_compact.pdf", width = 6, height = 4)
}
setwd("~/Desktop/jhu/research/projects/knockoffs/applications/dream5_sa_ec/ecoli/covariance_estimator=glasso")
for( covariance_estimator in c("glasso") ){ #"sample", "shrinkage",
for( address_genetic_perturbations in c( F, T ) ){
for( condition_on in c( "none", "pert_labels", "pert_labels_plus_pca" ) ){
add_prefixes = function(output_file){
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
all_calibration[[i]]$address_genetic_perturbations =
ifelse(
address_genetic_perturbations, "handled_as_described", "ignored"
)
all_calibration[[i]]$condition_on = condition_on
}
}
all_calibration %<>% data.table::rbindlist()
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_abline(aes(slope = 1, intercept = 0)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1) +
facet_grid(condition_on ~ address_genetic_perturbations)
ggsave("ecoli_calibration.pdf", width = 6, height = 8)
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr, shape = condition_on, color = condition_on)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1)  +
geom_abline(aes(slope = 1, intercept = 0)) +
facet_grid(~address_genetic_perturbations)
ggsave("ecoli_calibration_compact.pdf", width = 6, height = 4)
}
setwd("~/Desktop/jhu/research/projects/knockoffs/applications/dream5_sa_ec/ecoli)
for( covariance_estimator in c("glasso") ){ #"sample", "shrinkage",
for( address_genetic_perturbations in c( F, T ) ){
for( condition_on in c( "none", "pert_labels", "pert_labels_plus_pca" ) ){
add_prefixes = function(output_file){
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
all_calibration[[i]]$address_genetic_perturbations =
ifelse(
address_genetic_perturbations, "handled_as_described", "ignored"
)
all_calibration[[i]]$condition_on = condition_on
}
}
all_calibration %<>% data.table::rbindlist()
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_abline(aes(slope = 1, intercept = 0)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1) +
facet_grid(condition_on ~ address_genetic_perturbations)
ggsave("ecoli_calibration.pdf", width = 6, height = 8)
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr, shape = condition_on, color = condition_on)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1)  +
geom_abline(aes(slope = 1, intercept = 0)) +
facet_grid(~address_genetic_perturbations)
ggsave("ecoli_calibration_compact.pdf", width = 6, height = 4)
}
add_prefixes = function(output_file){
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
getwd()
setwd("..")
getwd()
add_prefixes = function(output_file){
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
i = 0
all_calibration = list()
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
# Remake some key plots
# setwd("../v1")
{
all_calibration = list()
i = 0
for( covariance_estimator in c("glasso") ){ #"sample", "shrinkage",
for( address_genetic_perturbations in c( F, T ) ){
for( condition_on in c( "none", "pert_labels", "pert_labels_plus_pca" ) ){
i = i + 1
add_prefixes = function(output_file){
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
all_calibration[[i]]$address_genetic_perturbations =
ifelse(
address_genetic_perturbations, "handled_as_described", "ignored"
)
all_calibration[[i]]$condition_on = condition_on
}
}
all_calibration %<>% data.table::rbindlist()
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_abline(aes(slope = 1, intercept = 0)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1) +
facet_grid(condition_on ~ address_genetic_perturbations)
ggsave("ecoli_calibration.pdf", width = 6, height = 8)
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr, shape = condition_on, color = condition_on)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1)  +
geom_abline(aes(slope = 1, intercept = 0)) +
facet_grid(~address_genetic_perturbations)
ggsave("ecoli_calibration_compact.pdf", width = 6, height = 4)
}
}
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr, shape = condition_on, color = condition_on)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1)  +
geom_abline(aes(slope = 1, intercept = 0)) +
facet_grid(~address_genetic_perturbations)
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_abline(aes(slope = 1, intercept = 0)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1) +
facet_grid(condition_on ~ address_genetic_perturbations)
# Remake some key plots
# setwd("../v1")
{
all_calibration = list()
i = 0
for( covariance_estimator in c("glasso") ){ #"sample", "shrinkage",
for( address_genetic_perturbations in c( F, T ) ){
for( condition_on in c( "none", "pert_labels", "pert_labels_plus_pca" ) ){
i = i + 1
add_prefixes = function(output_file, just_one = F){
if(just_one){
file.path(paste0("covariance_estimator=", covariance_estimator),
output_file)
} else {
file.path(paste0("covariance_estimator=", covariance_estimator),
paste0("address_genetic_perturbations=", address_genetic_perturbations),
paste0("condition_on=", condition_on),
output_file)
}
}
all_calibration[[i]] = read.csv(add_prefixes("ecoli_calibration.csv"))
all_calibration[[i]]$address_genetic_perturbations =
ifelse(
address_genetic_perturbations, "handled_as_described", "ignored"
)
all_calibration[[i]]$condition_on = condition_on
}
}
all_calibration %<>% data.table::rbindlist()
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_abline(aes(slope = 1, intercept = 0)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1) +
facet_grid(condition_on ~ address_genetic_perturbations)
ggsave(add_prefixes("ecoli_calibration.pdf", just_one = T), width = 6, height = 8)
ggplot(all_calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr, shape = condition_on, color = condition_on)) +
ggtitle("Calibration on DREAM5 E. coli") +
scale_y_continuous(limits = 0:1)  +
geom_abline(aes(slope = 1, intercept = 0)) +
facet_grid(~address_genetic_perturbations)
ggsave(add_prefixes("ecoli_calibration_compact.pdf", just_one = T), width = 6, height = 4)
}
}
